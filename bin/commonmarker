#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage: commonmarker [--html-renderer] [--list-extensions] [--extension=EXTENSION]
#                     [--list-parse-options] [--parse-option=OPTION]
#                     [--list-render-options] [--render-option=OPTION]
#                     [FILE..]
# Convert one or more CommonMark files to HTML and write to standard output.
# If no FILE argument is provided, text will be read from STDIN.
# With --html-renderer, use the HtmlRenderer renderer rather than the native C
# renderer.
# With --extension=EXTENSION, EXTENSION will be used for parsing, and HTML
# output unless --html-renderer is specified.
# With --parse-option=OPTION, OPTION will be passed during parsing.
# With --render-option=OPTION, OPTION will be passed during rendering.

if ARGV.include?('--help') or ARGV.include?('-h')
  File.read(__FILE__).split("\n")[2..-1].grep(/^# /).each do |line|
    puts line[2..-1]
  end
  exit 0
end

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'commonmarker'

if ARGV.include?('--version') or ARGV.include?('-v')
  puts "commonmarker #{CommonMarker::VERSION}"
  exit 0
end

root = File.expand_path('../../', __FILE__)
$:.unshift File.expand_path('lib', root)

extensions = CommonMarker.extensions
active_extensions = []

parse_options = CommonMarker::Config::Parse
active_parse_options = [:DEFAULT]

render_options = CommonMarker::Config::Render
active_render_options = [:DEFAULT]

renderer = nil
ARGV.delete_if do |arg|
  if arg =~ /^--html-renderer$/
    renderer = true
    true
  elsif arg =~ /^--list-extensions$/
    puts extensions
    exit 0
  elsif arg =~ /^--extension=(.+)$/
    if extensions.include?($1)
      active_extensions << $1.intern
    else
      STDERR.puts "extension #$1 not found"
      exit 1
    end
    true
  elsif arg =~ /^--list-parse-options$/
    puts parse_options.keys
    exit 0
  elsif arg =~ /^--parse-option=(.+)$/
    if parse_options.key?($1.to_sym)
      active_parse_options << $1.to_sym
    else
      STDERR.puts "parse-option #$1 not found"
      exit 1
    end
    true
  elsif arg =~ /^--list-render-options$/
    puts render_options.keys
    exit 0
  elsif arg =~ /^--render-option=(.+)$/
    if render_options.key?($1.to_sym)
      active_render_options << $1.to_sym
    else
      STDERR.puts "render-option #$1 not found"
      exit 1
    end
    true
  else
    false
  end
end

doc = CommonMarker.render_doc(ARGF.read, active_parse_options, active_extensions)

if renderer
  renderer = CommonMarker::HtmlRenderer.new(extensions: active_extensions)
  STDOUT.write(active_render_options.render(doc))
else
  STDOUT.write(doc.to_html(active_render_options, active_extensions))
end
